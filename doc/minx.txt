*vim-minx* *minx*

The insert-mode key mapping manager.

==============================================================================
CONTENTS                                                      *minx-contents*

Usage                                                            |minx-usage|
Function                                                      |minx-function|
Variable                                                      |minx-variable|
Highlight                                                    |minx-highlight|
Autocmd                                                        |minx-autocmd|



==============================================================================
Usage                                                            *minx-usage*

>
  " Auto close pairs.
  call minx#add('(', '()<Left>')
  call minx#add('<', '<><Left>')
  call minx#add('[', '[]<Left>')
  call minx#add('{', '{}<Left>')
  call minx#add('"', '""<Left>')
  call minx#add("'", "'<Left>")

  " Auto leave pairs.
  call minx#add(')', {
  \   'at': { c -> '\%#\V' .. c },
  \   'keys': '<Right>'
  \ })
  call minx#add(']', {
  \   'at': '\%#)',
  \   'keys': '<Right>'
  \ })

  " Auto wrapping.

<


==============================================================================
Function                                                      *searchx-function*

                                                               *searchx#start()*
searchx#start([opts])~

  Start / or ? like command.

  The `opts` argument can have the following properties.
    - `dir`
      - The search direction. 0 is prev. 1 is next.

                                                         *searchx#next()*
searchx#next()~

  Move to next match.

                                                         *searchx#prev()*
searchx#prev()~

  Move to prev match.

                                                               *searchx#clear()*
searchx#clear()~

  Clear all highlights.



==============================================================================
Variable                                                      *searchx-variable*

                                                         *g:searchx.auto_accept*
g:searchx.auto_accept~

  Specify check the marker jump on every input or not.

                                                             *g:searchx.markers*
g:serachx.markers~

  The array of characters for markers.

                                                             *g:searchx.convert*
g:searchx.convert~

  The function to convert input to search pattern.
  The recommended settings are the below.

>
  let g:searchx = {}
  function g:searchx.convert(input) abort
    if a:input !~# '\k'
      return '\V' .. a:input
    endif
    return join(split(a:input, ' '), '.\{-}')
  endfunction
<


==============================================================================
Highlight                                                    *searchx-highlight*

                                                            *hi-SeachxIncSearch*
SearchxIncSearch~

  The incsearch hilights.

                                                               *hi-SeachxMarker*
SearchxMarker~

  The marker highlights.

                                                       *hi-SearchxMarkerCurrent*
SearchxMarkerCurrent~

  The current maker highlights.



==============================================================================
Autocmd                                                        *searchx-autocmd*

                                                                  *SearchxEnter*
SearchxEnter~

  Enter searchx prompt.

                                                                  *SearchxLeave*
SearchxLeave~

  Leave searchx prompt.

                                                           *SearchxInputChanged*
SearchxInputChanged~

  Changed searchx prompt.

                                                                 *SearchxAccept*
SearchxAccept~

  Accept some jump point.

                                                           *SearchxAcceptReturn*
SearchxAcceptReturn~

  Accept some jump point via <CR>.

                                                           *SearchxAcceptMarker*
SearchxAcceptMarker~

  Accept some jump point via marker.

                                                                 *SearchxCancel*
SearchxCancel~

  Cancel searchx prompt.


==============================================================================
vim:tw=78:ts=4:et:ft=help:norl:


